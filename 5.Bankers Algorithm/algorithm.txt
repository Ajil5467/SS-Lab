Algorithm: Safety checking
Step 1 : Let W ork and F inish be vectors of length m and n, respectively. Initialize
Work ← Available and F inish[i] ← f alse for i ← 0, 1, . . . , n − 1.
Step 2 : Find an index i such that both a. Finish[i] == f alse b. Needi <= Work
Step 3 : if no such i exists then
Step 4 : go to 8
Step 5 : Work = Work + Allocation; Step 6 : Finish[i] = true 
Step 7 : Go to step 2
Step 8 : if F inish[i] == true for all i then
Step 9 : then the system is in a safe state.

Resource-Request Algorithm: This is the algorithm for determining whether requests can be safely granted. Let Requesti be the request vector for process Pi . If Requesti [j] == k, then processPi wants k instances of resource type Rj . When a request for resources is made by process Pi , below algorithm is uded.
Algorithm: Resource request algorithm
Step 1 : if Requesti <= Needi then
Step 2 : go to 4
Step 3 : else raise an error condition, since the process has exceeded its maximum claim.
Step 4 : if Requesti <= Available then
Step 5 : go to step 7
Step 6 : elsePi must wait, since the resources are not available.
Step 7 : Have the system pretend to have allocated the requested resources to process
Pi by modifying the state as follows:
Step 8 : Available = Available − Requesti Step 9 : Allocationi = Allocationi + Requesti Step 10 : Needi = Needi − Requesti


